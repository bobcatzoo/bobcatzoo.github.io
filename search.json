[{"categories":["Finance"],"content":"2008年的1次考证经历，第1次知道了期权并学到了期权定价的Black-Scholes-Merton公式，被其深深迷住，断断续续翻阅了许多书籍及文献资料，包括Hull那本及基础的数学分析、实分析及基于测度论的概率论等等，但由于大学专业和数学不相关，看起来很吃力，虽有收获但感觉却与​Black-Scholes-Merton公式渐行渐远，需要补习的基础知识太多。直到工作后于2015年左右开始读世图影印出版的Stochastic Calculus for Finance II方才有种醍醐灌顶的感觉，似懂非懂中看到第5章开头后就因种种原因放弃了。\n时间一直来到了2021年，趁COVID-19疫情期间工作之余，不忘初心又重新拾起那段记忆，从头开始又来到了第5章，过往的疑惑及不解在此刻正逐步消散。\n在此结合Stochastic Calculus for Finance II前5章的学习，对风险中性测度下的Black-Scholes-Merton理论推导做个总结，并结合C++和Python实现其定价公式，以便对给定的参数，计算出期权价格。希望若干年以后还能不忘初心，照着笔记顺藤摸瓜🍉\n1. 风险中性测度下的股价过程 1.1 概率测度$\\mathbb{P}$下的股价过程 假设 $W(t), 0 \\leq t \\leq T $是概率空间$(\\Omega, \\mathcal{F}, \\mathbb{P})$上的布朗运动，$\\mathcal{F}(t), 0\\leq t \\leq T$是该布朗运动的域流，考虑股价$S(t)$，其微分如下：\n\\[ d S(t)=\\alpha(t) S(t) d t+\\sigma(t) S(t) d W(t), \\quad 0 \\leq t \\leq T. \\tag{1.1} \\]\n其中平均回报率$\\alpha(t)$和股价波动率$\\sigma(t)$为适应性过程，则$S(t)$满足以下等式：\n\\[ S(t)=S(0) \\exp \\left\\{\\int_{0}^{t} \\sigma(s) d W(s)+\\int_{0}^{t}\\left[\\alpha(s)-\\frac{1}{2} \\sigma^{2}(s)\\right] d s\\right\\} \\tag{1.2} \\]\n假设我们有适应性利率过程$R(t)$，定义折现过程\n\\[ D(t)=e^{-\\int_{0}^{t} R(s) d s} \\tag{1.3} \\]\n则\n\\[ d D(t)=-R(t) D(t) d t \\tag{1.4} \\]\n$D(t)S(t)$及其微分$d (D(t)S(t))$分别为：\n\\[ D(t) S(t)=S(0) \\exp \\left\\{\\int_{0}^{t} \\sigma(s) d W(s)+\\int_{0}^{t}\\left[\\alpha(s)-R(s)-\\frac{1}{2} \\sigma^{2}(s)\\right] d s\\right\\} \\tag{1.5} \\]\n\\[ \\begin{aligned} d(D(t) S(t)) \u0026=[\\alpha(t)-R(t)] D(t) S(t) d t+\\sigma(t) D(t) S(t) d W(t) \\\\ \\\\ \u0026=\\sigma(t) D(t) S(t)[\\Theta(t) d t+d W(t)] \\end{aligned} \\tag{1.6} \\]\n其中定义风险的市场价格$\\Theta(t)=\\frac{\\alpha(t)-R(t)}{\\sigma(t)} $。\n1.2 Girsanov Theorem 假设$W(t), 0 \u003c t \u003c T$是概率空间$(\\Omega, \\mathcal{F}, \\mathbb{P})$上的布朗运动，$\\mathcal{F}(t)$为该布朗运动的域流，$\\Theta(t), 0 \u003c t \u003c T$为适应性过程。我们定义\n\\[ Z(t) =\\exp \\left\\{-\\int_{0}^{t} \\Theta(u) d W(u)-\\frac{1}{2} \\int_{0}^{t} \\Theta^{2}(u) d u\\right\\} \\tag{1.7} \\]\n\\[ \\widetilde{W}(t) =W(t)+\\int_{0}^{t} \\Theta(u) d u \\tag{1.8} \\]\n并假设\n\\[ \\mathbb{E} \\int_{0}^{T} \\Theta^{2}(u) Z^{2}(u) d u让$Z = Z(T)$。那么$\\mathbb{E}Z = 1$且在由\n\\[ \\widetilde{\\mathbb{P}}(A) = \\int_{A}Z(\\omega) d \\mathbb{P}(\\omega) \\quad \\text{对所有} A \\in \\mathcal{F}. \\tag{1.10} \\]\n定义的概率测度$\\widetilde{\\mathbb{P}}$下，$\\widetilde{W}(t), 0 \u003c t \u003c T$是布朗运动。$\\Box$\n1.3 概率测度$\\widetilde{\\mathbb{P}}$下的股价过程 根据Girsanov Theorem，在概率测度$\\widetilde{\\mathbb{P}}$下，$d \\widetilde W(t) = \\Theta(t) d t+d W(t) $，因此公式$(1.6)$也可以写为\n\\[ d (D(t)S(t)) = \\sigma(t) D(t) S(t) d \\widetilde W(t) \\tag{1.11} \\]\n两边同时积分\n\\[ D(t) S(t)=S(0)+\\int_{0}^{t} \\sigma(u) D(u) S(u) d \\widetilde{W}(u) \\tag{1.12} \\]\n由于在概率测度$\\widetilde{\\mathbb{P}}$下，$\\int_{0}^{t} \\sigma(u) D(u) S(u) d \\widetilde{W}(u)$是伊藤过程，因此是一个鞅。\n因此我们称Girsanov Theorem下的概率测度$\\widetilde{\\mathbb{P}}$为风险中性测度(risk-neutral measure)。\n将$d \\widetilde W(t) = \\Theta(t) d t+d W(t) $带入公式$(1.1)$，可以得到在概率测度$\\widetilde{\\mathbb{P}}$下，公式$(1.1)$和$(1.2)$分别可以改写成公式$(1.13)$和公式$(1.14)$的形式\n\\[ d S(t)= R(t) S(t) d t+\\sigma(t) S(t) d \\widetilde {W}(t) \\tag{1.13} \\]\n\\[ S(t) = S(0) \\exp \\left\\{\\int_{0}^{t} \\sigma(s) d \\widetilde{W}(s)+\\int_{0}^{t}\\left[R(s)-\\frac{1}{2} \\sigma^{2}(s)\\right] d s\\right\\} \\tag{1.14} \\]\n2. 风险中性测度下投资组合的价值过程 假设投资者初始资本为$X(0)$，在任意时间$t, 0 \u003c t \u003c T $持有$\\Delta(t)$份股票，同时以利率$R(t)$投资或借贷于货币市场，以维持自融资状态，则投资组合价值的微分为\n\\[ \\begin{aligned} d X(t) \u0026=\\Delta(t) d S(t)+R(t) \\left[ X(t)-\\Delta(t) S(t) \\right] d t \\\\ \\\\ \u0026=\\Delta(t) [\\alpha(t) S(t) d t+\\sigma(t) S(t) d W(t)]+R(t)[X(t)-\\Delta(t) S(t)] d t \\\\ \\\\ \u0026=R(t) X(t) d t+\\Delta(t)[\\alpha(t)-R(t)] S(t) d t+\\Delta(t) \\sigma(t) S(t) d W(t) \\\\ \\\\ \u0026=R(t) X(t) d t+\\Delta(t) \\sigma(t) S(t)[\\Theta(t) d t+d W(t)] \\end{aligned} \\tag{2.1} \\]\n根据$\\text{Ito}$乘法法则，由公式$(1.4)$和$(1.6)$可得\n\\[ \\begin{aligned} d(D(t) X(t)) \u0026=\\Delta(t) \\sigma(t) D(t) S(t)[\\Theta(t) d t+d W(t)] \\\\ \\\\ \u0026=\\Delta(t) d(D(t) S(t)) \\\\ \\\\ \u0026=\\Delta(t) \\sigma(t) D(t) S(t) d \\widetilde W(t) \\end{aligned} \\tag{2.2} \\]\n由此投资者有两种选择：\n 以利率$R(t)$投资于货币市场；\n 在风险中性测度$\\widetilde{\\mathbb{P}}$下投资于平均回报率为$R(t)$的股票。\n  但由于在风险中性测度$\\widetilde{\\mathbb{P}}$下，投资组合的折现价值$D(t)X(t)$是鞅，因此不管投资者如何选择，其投资组合的平均回报率均为为$R(t)$。\n3. 风险中性测度下的期权定价 我们令$\\mathcal{F}(T)$可测的随机变量$V(T)$表示在时刻$T$衍生证券空头的潜在支付(payoff) $(S(T)-K)^+$，投资者为了对冲看涨期权空头即未来所面临的潜在支出$V(T)$，那么其持有的投资组合$X(t)$需要使以下等式几乎必然成立(almost surely)\n\\[ X(T) = V(T) \\tag{3.1} \\]\n我们先假设公式$(3.1)$成立，并由此确定初始资本$X(0)$和$\\Delta t$过程。由$D(t)X(t)$在测度$\\widetilde{\\mathbb{P}}$是鞅的事实我们有\n\\[ D(t) X(t)=\\widetilde{\\mathbb{E}}[D(T) X(T) \\mid \\mathcal{F}(t)]=\\widetilde{\\mathbb{E}}[D(T) V(T) \\mid \\mathcal{F}(t)] \\tag{3.2} \\]\n$X(t)$表示在时刻$t$为完全对冲衍生证券支付$V(T)$所持有的投资组合价值，我们将其称之为衍生证券在时刻 $t$ 的价格并用$V(t)$表示，那么公式$(3.2)$可以写成\n\\[ D(t) V(t)=\\widetilde{\\mathbb{E}}[D(T) V(T) \\mid \\mathcal{F}(t)], 0 \\leq t \\leq T \\tag{3.3} \\]\n由于$D(t)$是$\\mathcal{F}(t)$可测的，因此我们可以将其移到公式右侧，得到\n\\[ V(t)=\\widetilde{\\mathbb{E}}\\left[e^{-\\int_{t}^{T} R(u) d u} V(T) \\mid \\mathcal{F}(t)\\right], 0 \\leq t \\leq T \\tag{3.4} \\]\n我们将公式$(3.3)$和$(3.4)$成为连续时间下风险中性定价公式(risk-neutral pricing formula)。\n4. 推导$\\text{Black-Scholes-Merton}$公式 为简单起见，我们假设$\\sigma(t)$和$R(t)$分别为常数 $\\sigma$ 和 $r$，则公式$(3.4)$简化为\n\\[ \\widetilde{\\mathbb{E}}\\left[e^{-r(T-t)}(S(T)-K)^{+} \\mid \\mathcal{F}(t)\\right] \\tag{4.1} \\]\n公式$(4.1)$仅依赖于时刻$t$和股价$S(t)$，由于几何布朗运动是马尔可夫过程，因此存在$c(t, S(t))$满足\n\\[ c(t, S(t)) = \\widetilde{\\mathbb{E}}\\left[e^{-r(T-t)}(S(T)-K)^{+} \\mid \\mathcal{F}(t)\\right] \\tag{4.2} \\]\n公式$(1.10)$简化为\n\\[ S(t) = S(0) \\exp \\left\\{\\sigma \\widetilde{W}(t)+\\left(r-\\frac{1}{2} \\sigma^{2}\\right) t\\right\\} \\tag{4.3} \\]\n则$S(T)$等于\n\\[ \\begin{aligned} S(T) \u0026=S(t) \\exp \\left\\{\\sigma(\\widetilde{W}(T)-\\widetilde{W}(t))+\\left(r-\\frac{1}{2} \\sigma^{2}\\right) \\tau\\right\\} \\\\ \\\\ \u0026=S(t) \\exp \\left\\{-\\sigma \\sqrt{\\tau} Y+\\left(r-\\frac{1}{2} \\sigma^{2}\\right) \\tau\\right\\} \\end{aligned} \\tag{4.4} \\]\n其中$\\tau = T - t$，$Y$是标准正态随机变量\n\\[ Y = - \\frac{\\widetilde{W}(T) - \\widetilde{W}(t)} {\\sqrt{T-t}} \\tag{4.5} \\]\n公式$(4.2)$可以写成如下形式\n\\[ \\begin{aligned} c(t, x) \u0026= \\widetilde{\\mathbb{E}}\\left[e^{-r \\tau}\\left(x \\exp \\left\\{-\\sigma \\sqrt{\\tau} Y+\\left(r-\\frac{1}{2} \\sigma^{2}\\right) \\tau\\right\\}-K\\right)^{+}\\right] \\\\ \\\\ \u0026= \\frac{1}{\\sqrt{2 \\pi}} \\int_{-\\infty}^{\\infty} e^{-r \\tau}\\left[ x \\exp \\left\\{-\\sigma \\sqrt{\\tau} y+\\left(r-\\frac{1}{2} \\sigma^{2}\\right) \\tau\\right\\}-K\\right]^{+} e^{-\\frac{1}{2} y^{2}} d y \\end{aligned} \\tag{4.6} \\]\n其中被积函数\n\\[ \\left[ x \\exp \\left\\{-\\sigma \\sqrt{\\tau} y+\\left(r-\\frac{1}{2} \\sigma^{2}\\right) \\tau\\right\\}-K\\right]^{+} \\tag{4.7} \\]\n为正，当且仅当\n\\[ y 由此\n\\[ \\begin{aligned} c(t, x) \u0026=\\frac{1}{\\sqrt{2 \\pi}} \\int_{-\\infty}^{d_{-}(\\tau, x)} e^{-r \\tau}\\left(x \\exp \\left\\{-\\sigma \\sqrt{\\tau} y+\\left(r-\\frac{1}{2} \\sigma^{2}\\right) \\tau\\right\\}-K\\right) e^{-\\frac{1}{2} y^{2}} d y \\\\ \\\\ \u0026=\\frac{1}{\\sqrt{2 \\pi}} \\int_{-\\infty}^{d_{-}(\\tau, x)} x \\exp \\left\\{-\\frac{y^{2}}{2}-\\sigma \\sqrt{\\tau} y-\\frac{\\sigma^{2} \\tau}{2}\\right\\} d y \\\\ \\\\ \u0026- \\frac{1}{\\sqrt{2 \\pi}} \\int_{-\\infty}^{d_{-}(\\tau, x)} e^{-r \\tau} K e^{-\\frac{1}{2} y^{2}} d y \\\\ \\\\ \u0026=\\frac{x}{\\sqrt{2 \\pi}} \\int_{-\\infty}^{d_{-}(\\tau, x)} \\exp \\left\\{-\\frac{1}{2}(y+\\sigma \\sqrt{\\tau})^{2}\\right\\} d y-e^{-r \\tau} K N\\left(d_{-}(\\tau, x)\\right) \\\\ \\\\ \u0026=\\frac{x}{\\sqrt{2 \\pi}} \\int_{-\\infty}^{d_{-}(\\tau, x)+\\sigma \\sqrt{\\tau}} \\exp \\left\\{-\\frac{z^{2}}{2}\\right\\} d z-e^{-r \\tau} K N\\left(d_{-}(\\tau, x)\\right) \\\\ \\\\ \u0026=x N\\left(d_{+}(\\tau, x)\\right)-e^{-r \\tau} K N\\left(d_{-}(\\tau, x)\\right) \\end{aligned} \\tag{4.9} \\]\n其中\n\\[ d_+(\\tau, x) = d_-(\\tau, x) + \\sigma \\sqrt{\\tau} = d_{-}(\\tau, x)=\\frac{1}{\\sigma \\sqrt{\\tau}}\\left[\\log \\frac{x}{K}+\\left(r+\\frac{1}{2} \\sigma^{2}\\right) \\tau\\right] \\tag{4.10} \\]\n由此我们得到了欧式看涨期权定价公式\n\\[ \\text{BSM}(\\tau, x, K, r, \\sigma) = x N\\left(d_{+}(\\tau, x)\\right)-e^{-r \\tau} K N\\left(d_{-}(\\tau, x)\\right) \\tag{4.11} \\]\n5. 欧式期权定价公式 根据上述对$\\text{Black-Scholes-Merton}$期权定价公式的推导，对于当前股价为$S_0$，行权价格为$K$，行权期为$T$，无风险利率为常数$r$，股价波动率为常数$\\sigma$的看涨期权，其期权费$c(S_0, K, T, r, \\sigma)$为：\n\\[ c(S_0, K, T, r, \\sigma)=N\\left(d_{1}\\right) S_{0}-N\\left(d_{2}\\right) K \\exp (-r T) \\tag{5.1} \\]\n其中\n\\[ d_{1} = \\frac{1}{\\sigma \\sqrt{T}}\\left(\\log \\left(\\frac{S_0}{K}\\right)+\\left(r+\\frac{\\sigma^{2}}{2}\\right) \\sqrt{T}\\right) \\tag{5.2} \\]\n\\[ d_{2} = \\frac{1}{\\sigma \\sqrt{T}}\\left(\\log \\left(\\frac{S_0}{K}\\right)+\\left(r-\\frac{\\sigma^{2}}{2}\\right) \\sqrt{T}\\right) \\tag{5.3} \\]\n$N(x)$为标准正态分布累积分布函数：\n\\[ N(x) = \\frac{1}{\\sqrt{2 \\pi}} \\int_{-\\infty}^{x} \\exp \\left(-\\frac{t^{2}}{2}\\right) d t \\tag{5.4} \\]\n对应看跌期权费$p(S_0, K, T, r, \\sigma)$为:\n\\[ p(S_0, K, T, r, \\sigma)=N\\left(-d_{2}\\right) K \\exp (-r T)-N\\left(-d_{1}\\right) S_0 \\tag{5.5} \\]\n6. 期权定价的C++实现 6.1 实现$N(x)$函数 - From Scratch to Boost Library 定价公式$(1)$-$(5)$中涉及$N(x)$、$\\exp(x)$和$\\log(x)$等3个函数，其中$\\exp(x)$和$\\log(x)$已在标准库\u003ccmath\u003e中实现，可以直接使用。因此只剩$N(x)$需要我们在标准库外自己实现或寻求其他库的支持。我们按照如下三种方式分别进行实现：\n 多项式逼近法 数值积分法 调用Boost库  6.1.1 多项式逼近法 如$x \u003e 0$，定义$k = 1/(1 + 0.2316419x)$，则$N(x)$可用如下关于$k$多项式进行逼近 \\( \\small 1 − \\frac{1}{\\sqrt{2 \\pi}} \\exp(-\\frac{x^2} {2}) k(0.319381530 + k(−0.356563782 + k(1.781477937 + k(−1.821255978 + 1.330274429k)))) \\tag{6.1} \\)\n借助$N(x) + N(-x) = 1$可以求得$N(-x)$即$x \u003c 0$时$N(x)$的值。\nC++实现如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13  const double Pi = 3.141592653589793; const double root2Pi = sqrt(2.0 * Pi); double normcdf_poly(double x) { if (x \u003c 0) return 1 - normcdf_ploy(-x); double k = 1 / (1 + 0.2316419 * x); double poly = k * (0.319381530 + k * (-0.356563782 + k * (1.781477937 + k * (-1.821255978 + 1.330274429 * k)))); double approx = 1.0 - 1.0 / root2Pi * exp(-0.5 * x * x) * poly; return approx; }   6.1.2 数值积分法 对于实数域上$\\mathbb R \\to \\mathbb R$的黎曼积分\n\\[ F(b) - F(a) = \\int_{a}^{b} f(x) d x \\tag{6.2} \\]\n令$\\Delta x = \\frac{(b-a)}{N}$，根据黎曼积分定义，我们可以用以下矩形的面积和逼近$\\int_{a}^{b} f(x) d x$：\n\\[ \\lim_{N \\to \\infty} \\sum_{i=0}^{N-1} f\\left(a+(i+\\frac{1}{2}) \\Delta x\\right) \\Delta x \\tag{6.3} \\]\n只要$N$取值足够大即可很好的逼近积分值，可以通过定义$f(x) = x ^ 2 + 1$进行简单验证，C++实现如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  #include \u003ciostream\u003e#include \u003ccmath\u003eusing namespace std; double f_x(double x) { return pow(x, 2) + 1; } double integrate_fx(double a, double b, int N) { double delta = (b - a) / N; double integrate = 0.0; int i = 0; while (i \u003c N) { double x = a + (i + 0.5) * delta; integrate += f_x(x) * delta; i++; } return integrate; } int main() { double a = 1; double b = 3; int N = 1000; double integrate_ = 0.0; integrate_ = integrate_fx(a, b, N); cout \u003c\u003c integrate_ \u003c\u003c endl; //返回10+2/3(约等于10.666667)  return 0; }   下面我们考虑如何用数值积分法逼近\n\\[ N(x)=\\frac{1}{\\sqrt{2 \\pi}} \\int_{-\\infty}^{x} \\exp \\left(-\\frac{t^{2}}{2}\\right) d t \\]\n由于积分下限为$- \\infty$，我们需要考虑进行变量替换，定义$t = x + 1 - \\frac{1} {s}$，则$N(x)$等价于如下积分：\n\\[ \\frac{1} {\\sqrt {2 \\pi}} \\int_{0}^{1} \\frac{1}{s^{2}} \\exp \\left(-\\frac{\\left(x+1-\\frac{1}{s}\\right)^{2}}{2}\\right) \\mathrm{d} s \\tag{6.4} \\]\nC++实现如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  double normcdf_integrate(double x) { int a = 0; int b = 1; double N = 1000; double delta = 1 / N; double integrate = 0.0; for (int i = 0; i \u003c N; i++) { double s = a + (i + 0.5) * delta; double t = x + 1 - pow(s, -1); double f = pow(2 * PI, -0.5) * pow(s, -2) * exp(-0.5 * t * t); integrate += f * delta; } return integrate; }   6.1.3 调用boost库 我们可以通过如下方式调用boost库中的累积分布函数（Cumulative Distribution Function，简称$\\mathrm{cdf}$)的实现\n1 2 3 4 5 6 7 8 9 10 11  #include \"boost\\math\\distributions\\normal.hpp\"#include \u003crandom\u003e double normcdf_boost(double x) { double cdf = 0.0; boost::math::normal_distribution\u003c\u003e norm(0, 1); //生成标准正态分布  cdf = boost::math::cdf(norm, x); //计算N(x)值  return cdf; }   6.2 期权费计算的C++实现 实现$N(x)$后，计算公式$(1)$中欧式看涨期权$c(S_0, K, T, r, \\sigma)$的障碍就清除了。下面我们分别定义blackScholesCallPrice和blackScholesPutPrice函数完成计算$c(S_0, K, T, r, \\sigma)$和$p(S_0, K, T, r, \\sigma)$。\n1 2 3 4 5 6 7 8 9 10 11  double blackScholesCallPrice(double K, double T, double S_t, double vol, double r) { double d1 = pow((vol * sqrt(T)), -1) * (log(S_t / K) + (r + 0.5 * pow(vol, 2)) * sqrt(T)); double d2 = d1 - vol * sqrt(T); //以下normcdf(x)函数3选1，默认选normcdf_poly(x)，使用normcdf_boost(x)时请自行配置boost库  double callPrice = normcdf_poly(d1) * S_t - normcdf_poly(d2) * K * exp(-r * T); //double callPrice = normcdf_integrate(d1) * S_t - normcdf_integrate(d2) * K * exp(-r * T);  //double callPrice = normcdf_boost(d1) * S_t - normcdf_boost(d2) * K * exp(-r * T);  return callPrice; }  1 2 3 4 5 6 7 8 9 10 11  double blackScholesPutPrice(double K, double T, double S_t, double vol, double r) { double d1 = pow((vol * sqrt(T)), -1) * (log(S_t / K) + (r + 0.5 * vol * vol) * sqrt(T)); double d2 = d1 - vol * sqrt(T); //以下normcdf(x)函数3选1，默认选normcdf_poly(x)，使用normcdf_boost(x)时请自行配置boost库  double putPrice = normcdf_poly(-d2) * K * exp(-r * T) - normcdf_poly(-d1) * S_t; //double putPrice = normcdf_integrate(-d2) * K * exp(-r * T) - normcdf_integrate(-d1) * S_t;  //double putPrice = normcdf_boost(-d2) * K * exp(-r * T) - normcdf_boost(-d1) * S_t;  return putPrice; }   6.3 完整工程文件及测试 头文件stdafx.h\n1 2 3 4 5 6  #pragma once #include \u003ciostream\u003e#include \u003ccmath\u003e//请在Visual Studio中自行配置好boost库后取消注释 //#include \"boost\\math\\distributions\\normal.hpp\" //#include \u003crandom\u003e    头文件OptionPricing.h\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  #pragma once  static const double PI = 3.14159265358979; //定义Pi值  //S_t: spotPrice //T: maturity //K: strikePrice //vol: volatility //r: riskFreeInterestRate  //声明看涨期权定价公式 double blackScholesCallPrice(double K, double T, double S_t, double vol, double r); //声明看跌期权定价公式 double blackScholesPutPrice(double K, double T, double S_t, double vol, double r);   源文件OptionPricing.cpp\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74  #include \"OptionPricing.h\"#include \"stdafx.h\" static const double root2Pi = sqrt(2.0 * PI); static inline double normcdf_poly(double x) { if (x \u003c 0) return 1 - normcdf_poly(-x); double k = 1 / (1 + 0.2316419 * x); double poly = k * (0.319381530 + k * (-0.356563782 + k * (1.781477937 + k * (-1.821255978 + 1.330274429 * k)))); double approx = 1.0 - 1.0 / root2Pi * exp(-0.5 * x * x) * poly; return approx; } static inline double normcdf_integrate(double x) { int a = 0; int b = 1; double N = 1000; double delta = 1 / N; double integrate = 0.0; for (int i = 0; i \u003c N; i++) { double s = a + (i + 0.5) * delta; double t = x + 1 - pow(s, -1); double f = pow(2 * PI, -0.5) * pow(s, -2) * exp(-0.5 * t * t); integrate += f * delta; } return integrate; } //请在Visual Studio中自行配置好boost库后取消注释 /* static inline double normcdf_boost(double x) { double cdf = 0.0; boost::math::normal_distribution\u003c\u003e norm(0, 1); //生成标准正态分布 cdf = boost::math::cdf(norm, x); //计算N(x)值 return cdf; } */ //S_t: spotPrice //T: maturity //K: strikePrice //vol: volatility //r: riskFreeInterestRate  double blackScholesCallPrice(double K, double T, double S_t, double vol, double r) { double d1 = pow((vol * sqrt(T)), -1) * (log(S_t / K) + (r + 0.5 * pow(vol, 2)) * sqrt(T)); double d2 = d1 - vol * sqrt(T); //以下normcdf(x)函数3选1，默认选normcdf_poly(x)，使用normcdf_boost(x)时请自行配置boost库  double callPrice = normcdf_poly(d1) * S_t - normcdf_poly(d2) * K * exp(-r * T); //double callPrice = normcdf_integrate(d1) * S_t - normcdf_integrate(d2) * K * exp(-r * T);  //double callPrice = normcdf_boost(d1) * S_t - normcdf_boost(d2) * K * exp(-r * T);  return callPrice; } double blackScholesPutPrice(double K, double T, double S_t, double vol, double r) { double d1 = pow((vol * sqrt(T)), -1) * (log(S_t / K) + (r + 0.5 * vol * vol) * sqrt(T)); double d2 = d1 - vol * sqrt(T); //以下normcdf(x)函数3选1，默认选normcdf_poly(x)，使用normcdf_boost(x)时请自行配置boost库  double putPrice = normcdf_poly(-d2) * K * exp(-r * T) - normcdf_poly(-d1) * S_t; //double putPrice = normcdf_integrate(-d2) * K * exp(-r * T) - normcdf_integrate(-d1) * S_t;  //double putPrice = normcdf_boost(-d2) * K * exp(-r * T) - normcdf_boost(-d1) * S_t;  return putPrice; }   测试文件main.cpp\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  #include \u003ciostream\u003e#include \"OptionPricing.h\"using namespace std; int main() { double K = 100.0; double S_t = 110.0; double vol = 0.1; double r = 0.03; double T = 0.5; double call; double put; double putCallParity; call = blackScholesCallPrice(K, T, S_t, vol, r); cout \u003c\u003c \"The call option price is: \" \u003c\u003c call \u003c\u003c endl; //11.6725  put = blackScholesPutPrice(K, T, S_t, vol, r); cout \u003c\u003c \"The put option price is: \" \u003c\u003c put \u003c\u003c endl; //0.183688  cout \u003c\u003c endl; cout \u003c\u003c \"\u003cPut-Call-Parity = Call Price - Put Price\u003e Testing\" \u003c\u003c endl; cout \u003c\u003c \"\u003cCall Price - Put Price\u003e is: \" \u003c\u003c call - put \u003c\u003c endl; putCallParity = S_t - exp(-r * T) * K; cout \u003c\u003c \"\u003cPut-Call-Parity\u003e is: \" \u003c\u003c putCallParity \u003c\u003c endl; cout \u003c\u003c \"Wonderful! It's correct.\" \u003c\u003c endl; return 0; }   其中看涨-看跌期权平价公式为\n\\[ S_0 - \\exp(-rT)K = c(S_0, K, T, r, \\sigma) - p(S_0, K, T, r, \\sigma) \\tag{6.5} \\]\n7. 期权定价的Python实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53  import math import numpy as np from scipy.stats import norm //定义以下简写变量 //K: strikePrice //T: maturity //S_t: spotPrice //vol: volatility //r: riskFreeRate //定义d1和d2 def d1f(K, T, S_t, vol, r) : return math.pow(vol * np.sqrt(T), -1) * \\ (np.log(S_t / K) + (r + 0.5 * math.pow(vol, 2) * np.sqrt(T))) def d2f(K, T, S_t, vol, r) : return d1f(K, T, S_t, vol, r) - vol * np.sqrt(T) //定义看涨-看跌期权计算公式 def blackScholesCallPrice(K, T, S_t, vol, r) : d1 = d1f(K, T, S_t, vol, r) d2 = d2f(K, T, S_t, vol, r) callPrice = norm.cdf(d1) * S_t - norm.cdf(d2) * K * np.exp(-r * T) return callPrice def blackScholesPutPrice(K, T, S_t, vol, r) : d1 = d1f(K, T, S_t, vol, r) d2 = d2f(K, T, S_t, vol, r) putPrice = norm.cdf(-d2) * K * np.exp(-r * T) - norm.cdf(-d1) * S_t return putPrice //定义看涨-看跌期权平价测试公式 def callPutParity(K, T, S_t, r) : return S_t - np.exp(-r * T) * K //对给定变量进行测试 K = 100.0 S_t = 110.0 vol = 0.1 r = 0.03 T = 0.5 call = blackScholesCallPrice(K, T, S_t, vol, r) put = blackScholesPutPrice(K, T, S_t, vol, r) callPutParity_ = callPutParity(K, T, S_t, r) print(\"The call option price is: {0}\".format(call)) print(\"The put option price is: {0}\".format(put)) print(\"Call price - put price is: {0}\".format(call - put)) print(\"The Call-Put-Parity is: {0}\".format(callPutParity_))   致谢：\n妈咪叔LaTeX助力 在线LaTeX\n参考:\nStochastic Calculus for Finance II - Continuous-Time Models\nC++ for Financial Mathematics\n","description":"","tags":["金融数学"],"title":"Black-Scholes-Merton Model","uri":"/posts/black-scholes-model/"},{"categories":["Finance"],"content":"本文主要对金融随机分析第2册第1张第6节测度变换进行总结，学习LaTeX数学公式的用法，同时借助Plotly，练习图像绘制，便于更直观理解连续概率分布下的测度变换本质。\n1 Introduction 1.1 Chapter 1 section 6 assert the following conclusions: We pick up the thread of Section 3.1 of Volume I, in which we used a positive random variable $Z$ to change probability measures on a space $\\Omega$. We need to do this when we change from the actual probability measure $\\mathbb{P}$ to the risk-neutral probability measure $\\widetilde{\\mathbb{P}}$ in models of financial markets. When $\\Omega$ is uncountably infinite and $\\mathbb{P}(\\omega) = \\widetilde{\\mathbb{P}}(\\omega) = 0$ for every $\\omega \\subseteq \\Omega$, it no longer makes sense to write (3.1.1) of Chapter 3 of Volume I,\n\\[ Z(\\omega)=\\frac{\\widetilde{\\mathbb{P}}(\\omega)}{\\mathbb{P}(\\omega)} \\tag{1.6.1} \\]\nbecause division by zero is undefined. We could rewrite this equation as\n\\[ Z(\\omega) \\mathbb{P}(\\omega) = \\widetilde{\\mathbb{P}}(\\omega) \\tag{1.6.2} \\]\nand now we have a meaningful equation, with both sides equal to zero, but the equation tells us nothing about the relationship among $\\mathbb{P}$, $\\widetilde{\\mathbb{P}}$, and $Z$. Because $\\mathbb{P}(\\omega) = \\widetilde{\\mathbb{P}}(\\omega) = 0$, the value os $Z(\\omega)$ could be anything and (1.6.2) would still hold.\nHowever, (1.6.2) does capture the spirit of what we would like to accomplish. To change from $\\mathbb{P}$ to $\\widetilde{\\mathbb{P}}$, we need to reassign probabilities in $\\Omega$ using $Z$ to tell us where in $\\Omega$ we should revise the probability upward (where $Z \u003e 1$) and where we should revise the probability downward (where $Z \u003c 1$). However, we should do this set-by-set, rather than $\\omega$-by-$\\omega$. The process is described by the following theorem.\nTheorem 1.6.1. Let $(\\Omega, \\mathcal{F}, \\mathbb{P})$ be a probability space and let $Z$ be an almost surely nonnegative random variable with $\\mathbb{E}Z = 1$. For $ A \\subseteq \\mathcal{F}$, define\n\\[ \\widetilde{\\mathbb{P}}(A)=\\int_{A} Z(\\omega) d \\mathbb{P}(\\omega) \\tag{1.6.3} \\]\nThen $\\widetilde{\\mathbb{P}}$ is a probability measure. Furthermore, if $X$ is a nonnegative random variable, then\n\\[ \\widetilde{\\mathbb{E}} X=\\mathbb{E}[X Z] \\tag{1.6.4} \\]\nIf $Z$ is almost surely strictly positive, we also have\n\\[ \\mathbb{E} Y=\\widetilde{\\mathbb{E}}\\left[\\frac{Y}{Z}\\right] \\tag{1.6.5} \\]\nfor every nonnegative random variable $Y$.\nThe $\\widetilde{\\mathbb{E}}$ appearing in (1.6.4) is expectation under the probability measure $\\widetilde{\\mathbb{P}}$ (i.e., $\\widetilde{\\mathbb{E}}X = \\int_{\\Omega} X(\\omega) d \\mathbb{P}(\\omega)$).\nDefinition 1.6.3. Let $\\Omega$ be a nonemyty set and $\\mathcal{F}$ a a-algebra of subsets of $\\Omega$. Two probability measures $\\mathbb{P}$ and $\\widetilde{\\mathbb{P}}$ on $(\\Omega, \\mathcal{F})$ are said to be equivalent if they agree which sets in $\\Omega$ have probability zero.\nDefinition 1.6.5 Let $(\\Omega, \\mathcal{F}, \\mathbb{P})$ be a probability space, let $\\widetilde{\\mathbb{P}}$ be another probability measure on $(\\Omega, \\mathcal{F})$ that is equivalent to $\\mathbb{P}$, and let $Z$ be an almost surely positive random variable that relates $\\mathbb{P}$ and $\\widetilde{\\mathbb{P}}$ via {1.6.3}. Then $Z$ is called the Radon-Nikodym derivative of $\\widetilde{\\mathbb{P}}$ with respect to $\\mathbb{P}$, and we write\n\\[ Z=\\frac{d \\widetilde{\\mathbb{P}}}{d \\mathbb{P}} \\notag \\]\nTheorem 1.6.7 (Radon-Nikodym). Let $\\mathbb{P}$ and $\\widetilde{\\mathbb{P}}$ be equivalent probability measures defined on $(\\Omega, \\mathcal{F})$. Then there exists an almost surely positive random variable $Z$ such that $\\mathbb{E}Z = 1$ and\n\\[ \\widetilde{\\mathbb{P}}(A)=\\int_{A} Z(\\omega) d \\mathbb{P}(\\omega) \\text { for every } A \\in \\mathcal{F} \\notag \\]\n1.2 正态分布简介 正态分布的概率密度函数是均值为$\\mu$ 方差为$\\sigma ^{2}$(或标准差$\\sigma$)是高斯函数的一个实例：\n\\[ f(x ; \\mu, \\sigma)=\\frac{1}{\\sigma \\sqrt{2 \\pi}} \\exp \\left(-\\frac{(x-\\mu)^{2}}{2 \\sigma^{2}}\\right) \\notag \\]\n累积分布函数是指随机变量$X$小于或等于$x$的概率，用概率密度函数表示为\n\\[ F(x ; \\mu, \\sigma)=\\frac{1}{\\sigma \\sqrt{2 \\pi}} \\int_{-\\infty}^{x} \\exp \\left(-\\frac{(t-\\mu)^{2}}{2 \\sigma^{2}}\\right) d t \\notag \\]\n如果一个随机变量$X$服从这个分布，我们写作$X \\sim N(\\mu ,\\sigma ^{2})$. 如果$\\mu = 0$并且$\\sigma = 1$，这个分布被称为标准正态分布，这个分布能够简化为\n\\[ f(x)=\\frac{1}{\\sqrt{2 \\pi}} \\exp \\left(-\\frac{x^{2}}{2}\\right) \\notag \\]\n\\[ F(x)=\\int_{-\\infty}^{x} f(t) d t = \\frac{1}{\\sqrt{2 \\pi}} \\int_{-\\infty}^{x} \\exp \\left(-\\frac{t^{2}}{2}\\right) d t \\notag \\]\n1.3 正态随机变量的测度变换 令$X$为标准正态随机变量,即\n\\[ \\mu_{X}(B)=\\mathbb{P}\\{X \\in B\\}=\\int_{B} \\varphi(x) d x \\text { for every Borel subset } B \\text { of } \\mathbb{R} \\tag{1.6.7} \\]\n其中概率密度函数(Probability Density Function)如下\n\\[ \\varphi(x)=\\frac{1}{\\sqrt{2 \\pi}} e^{-\\frac{x^{2}}{2}} \\notag \\]\n我们取$B = \\left(-\\infty, b \\right]$, 则得到如下熟悉的累积分布函数(Cumulative Distribution Function)\n\\[ \\mathbb{P}\\{X \\leq b\\}=\\int_{-\\infty}^{b} \\varphi(x) d x \\text { for every } b \\in \\mathbb{R} \\tag{1.6.8} \\]\n同时定义如下随机变量$Z(\\omega)$\n\\[ Z(\\omega)=\\exp \\left\\{-\\theta X(\\omega)-\\frac{1}{2} \\theta^{2}\\right\\} \\text { for all } \\omega \\in \\Omega \\notag \\]\n我们有\n\\[ \\begin{aligned} \\mathbb{E} Z \u0026=\\int_{-\\infty}^{\\infty} \\exp \\left\\{-\\theta x-\\frac{1}{2} \\theta^{2}\\right\\} \\varphi(x) d x \\\\ \u0026=\\frac{1}{\\sqrt{2 \\pi}} \\int_{-\\infty}^{\\infty} \\exp \\left\\{-\\frac{1}{2}\\left(x^{2}+2 \\theta x+\\theta^{2}\\right)\\right\\} d x \\\\ \u0026=\\frac{1}{\\sqrt{2 \\pi}} \\int_{-\\infty}^{\\infty} \\exp \\left\\{-\\frac{1}{2}(x+\\theta)^{2}\\right\\} d x \\\\ \u0026=\\frac{1}{\\sqrt{2 \\pi}} \\int_{-\\infty}^{\\infty} \\exp \\left\\{-\\frac{1}{2} y^{2}\\right\\} d y \\end{aligned} \\notag \\]\n及\n\\[ \\begin{aligned} \\widetilde{\\mathbb{P}}\\{Y \\leq b\\} \u0026=\\int_{\\{\\omega ; Y(\\omega) \\leq b\\}} Z(\\omega) d \\mathbb{P}(\\omega) \\\\ \u0026=\\int_{\\Omega} \\mathbb{I}_{\\{Y(\\omega) \\leq b\\}} Z(\\omega) d \\mathbb{P}(\\omega) \\\\ \u0026=\\int_{\\Omega} \\mathbb{I}_{\\{X(\\omega) \\leq b-\\theta\\}} \\exp \\left\\{-\\theta X(\\omega)-\\frac{1}{2} \\theta^{2}\\right\\} d \\mathbb{P}(\\omega) \\\\ \u0026=\\int_{-\\infty}^{\\infty} \\mathbb{I}_{\\{x \\leq b-\\theta\\}} e^{-\\theta x-\\frac{1}{2} \\theta^{2}} \\varphi(x) d x \\\\ \u0026=\\frac{1}{\\sqrt{2 \\pi}} \\int_{-\\infty}^{b-\\theta} e^{-\\theta x-\\frac{1}{2} \\theta^{2}} e^{-\\frac{x^{2}}{2}} d x \\\\ \u0026=\\frac{1}{\\sqrt{2 \\pi}} \\int_{-\\infty}^{b-\\theta} e^{-\\frac{1}{2}(x+\\theta)^{2}} d x \\\\ \u0026=\\frac{1}{\\sqrt{2 \\pi}} \\int_{-\\infty}^{b} e^{-\\frac{1}{2} y^{2}} d y \\end{aligned} \\notag \\]\n即\n\\[ \\mathbb{E} Z =\\frac{1}{\\sqrt{2 \\pi}} \\int_{-\\infty}^{\\infty} \\exp \\left\\{-\\frac{1}{2} y^{2}\\right\\} d y = 1 \\notag \\]\n满足Radon-Nikodym定理(1.6.7)且\n\\[ \\widetilde{\\mathbb{P}}\\{Y \\leq b\\}=\\frac{1}{\\sqrt{2 \\pi}} \\int_{-\\infty}^{b} e^{-\\frac{1}{2} y^{2}} d y \\notag \\]\n因此随机变量$Y$在概率测度$\\widetilde{\\mathbb{P}}$下是标准正态随机变量。\n2 In Python's Perspective 2.1 准备工作 1 2 3 4 5 6 7 8 9 10 11 12 13  import numpy as np import pandas as pd from scipy import stats import cufflinks as cf from plotly.offline import iplot, init_notebook_mode # set up configuration (run it once) cf.set_config_file(world_readable=True, theme='pearl',offline=True) init_notebook_mode() from plotly.subplots import make_subplots # 画图工具 import plotly.graph_objects as go   要用到的函数说明：\n$\\text{返回} X \\sim N (\\mu, \\sigma) \\text{的概率密度函数}$(pdf) $f(x, \\mu, \\sigma)$\n1  stats.norm.pdf(x, mu, sigma)   $\\text{返回} X \\sim N (\\mu, \\sigma) \\text{的概率分布函数}$(cdf) $F(x, \\mu, \\sigma)$\n1  stats.norm.cdf(x, mu, sigma)   $\\text{返回} X \\sim N (\\mu, \\sigma) \\text{置信度为}\\alpha\\text{的上分位数} Z(\\alpha , \\mu, \\sigma)$\n1  stats.norm.isf(alpha, mu, sigma)   创建标准正态分布及其pdf和cdf\n1 2 3 4 5 6 7 8  dx = 0.001 mu = 0 sigma = 1 sigma_N = 3 * sigma x = np.arange(-sigma_N, sigma_N, dx) # 由于标准正态分布的值在3σ域外几乎可以忽略不计，因此选定定义域为[-3σ, 3σ) y_pdf = stats.norm.pdf(x, 0, 1) # 标准正态分布概率密度函数(Probability Density Function) y_cdf = stats.norm.cdf(x, 0, 1) # 标准正态分布累积分布函数(Cumulative Distribution Function)   2.2 绘制标准正态分布的pdf和cdf图像 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  fig = make_subplots(rows=1, cols=2, shared_yaxes=True, horizontal_spacing=0.1) fig.add_trace(go.Scatter(x=x, y=y_pdf, name='pdf'), row=1, col=1) # 非LaTeX显示图例 不建议使用LaTeX显示图例，否则如果图例较长的话，容易与图像重叠，造成图像不美观，尤其是下面设置双Y轴时 fig.add_trace(go.Scatter(x=x, y=y_cdf, name=r'$\\text{cdf}$'), row=1, col=2) # LaTeX显示图例 fig.update_xaxes(title_text=r'$\\text{The values of }x$', row=1, col=1) fig.update_xaxes(title_text=r'$\\text{The values of }x$', row=1, col=2) fig.update_yaxes(title_text=r'$\\text{The values of pdf}$', row=1, col=1) fig.update_yaxes(title_text=r'$\\text{The values of cdf}$', row=1, col=2) fig.update_layout(height=500, width=800, title_text=r\"$\\text{Normal Distribution } X \\sim N(0, 1)$\", title_x=0.5) # 显示LaTeX标题 fig.show()   \n将图像绘制在一张图上\n1 2 3 4 5 6 7 8 9  fig = go.Figure() fig.add_trace(go.Scatter(x=x, y=y_pdf, mode='lines', name='pdf')) fig.add_trace(go.Scatter(x=x, y=y_cdf, mode='lines', name='cdf')) fig.update_layout(height=500, width=800, title_text=r\"$\\text{Normal Distribution } X \\sim N(0, 1)$\", title_x=0.5, xaxis_title = r'$\\text{The values of x}$', yaxis_title = r'$\\text{The values of pdf and cdf}$') fig.show()   \n2.3 可视化将概率测度$\\mathbb{P}$变换成$\\widetilde{\\mathbb{P}}$ 的$Z(\\omega)$ \\[ d \\widetilde{\\mathbb{P}} = Z(x) {d \\mathbb{P}} = Z(x) \\varphi(x) d x = Z(x) \\frac{1}{\\sqrt{2 \\pi}} e^{-\\frac{x^{2}}{2}} d x \\]\n\\[ Z(\\omega)=\\exp \\left\\{-\\theta X(\\omega)-\\frac{1}{2} \\theta^{2}\\right\\} \\text { for all } \\omega \\in \\Omega \\]\n生成$\\theta = 1 \\text{的} Z (\\omega)$\n1 2  theta = 1 Z_omega = np.exp(-theta * x - 0.5 * theta ** 2)   绘制$Z (\\omega)$图像\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  # Initialize figure with subplots fig = go.Figure() # Add traces fig.add_trace(go.Scatter(x=x, y=Z_omega, mode='lines', name='Z_omega')) fig.add_hline(y=1, name = 'Z_omega = 1', line_color = \"red\", line_dash=\"dot\", line_width=2, annotation_text=\"Baseline Z = 1\", annotation_position=\"bottom right\") #添加水平线Z_omega = 1，用于直观判断Z对原始概率增大和减小的分界点 fig.add_vline(x=-0.5, line_width=2, line_dash=\"dash\", line_color=\"green\") #添加垂直线x = -0.5，即Z对原始概率改变的分界点为x=-0.5 #fig.add_trace(go.Scatter(x=x, y=base, mode='lines', name='Baseline Z = 1')) # Update xaxis properties fig.update_xaxes(title_text=r'$\\text{The values of }x$') # Update yaxis properties fig.update_yaxes(title_text=r'$\\text{The values of }Z(\\omega)$') # Update layout info fig.layout.xaxis.automargin: True fig.update_layout(height=500, width=800, showlegend=True, title_text=r\"$Z(\\omega)=\\exp \\left\\{-\\theta X(\\omega)-\\frac{1}{2}\\theta^{2}\\right\\}$\", title_x=0.5) fig.show()   \n生成经过$Z (\\omega)$变换后的新概率分布\n1 2  Z_x_pdf = stats.norm.pdf(x, -1, 1) Z_x_cdf = stats.norm.cdf(x, -1, 1)   绘制变换前后的概率分布图象\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  # Create figure with secondary y-axis fig = make_subplots(specs=[[{\"secondary_y\": True}]]) fig.add_trace(go.Scatter(x=x, y=y_pdf, mode='lines', name='pdf of normal distribution'), secondary_y=False) fig.add_trace(go.Scatter(x=x, y=Z_x_pdf, mode='lines', name='pdf of Z_x'), secondary_y=False) fig.add_trace(go.Scatter(x=x, y=y_cdf, mode='lines', name='cdf of normal distribution'), secondary_y=False) fig.add_trace(go.Scatter(x=x, y=Z_x_cdf, mode='lines', name='cdf of Z_x'), secondary_y=False) fig.add_trace(go.Scatter(x=x, y=Z_omega, mode='lines', name=\"The values of Z\"), secondary_y=True) fig.add_hline(y=1, name = 'Z_omega = 1', line_color = \"red\", line_dash=\"dot\", line_width=2, secondary_y=True) # annotation_text=\"Baseline Z = 1\"无法在secondary y-axis显示 # annotation_position=\"bottom right\"无法在secondary y-axis显示 fig.add_vline(x=-0.5, line_width=2, line_dash=\"dash\", line_color=\"green\") fig.update_xaxes(title_text = r'$\\text{The values of }x$') fig.update_yaxes(title_text = r'$\\text{The values of pdf and cdf}$', secondary_y=False) fig.update_yaxes(title_text = r'$\\text{The values of }Z$', secondary_y=True) fig.update_layout(height=500, width=800, title_text=r\"$\\text{Normal Distribution and Change of Measure } Z(\\omega) $\", title_x=0.4) fig.show()   \n2.4 正态分布与柯西分布的测度变换 柯西分布也叫作柯西-洛伦兹分布，它是以奥古斯丁·路易·柯西与亨德里克·洛伦兹名字命名的连续概率分布，其概率密度函数为\n\\[ \\begin{array}{l} c\\left(x ; x_{0}, \\gamma\\right)=\\frac{1}{\\pi \\gamma\\left[1+\\left(\\frac{x-x_{0}}{\\gamma}\\right)^{2}\\right]} \\\\ =\\frac{1}{\\pi}\\left[\\frac{\\gamma}{\\left(x-x_{0}\\right)^{2}+\\gamma^{2}}\\right] \\end{array} \\]\n其中$x_0$是定义分布峰值位置的位置参数，$\\gamma$是最大值一半处的一半宽度的尺度参数。\n$x_0 = 0$且$γ = 1$的特例称为标准柯西分布，其概率密度函数为\n\\[ c(x ; 0,1)=\\frac{1}{\\pi\\left(1+x^{2}\\right)} \\]\n回顾以下正态分布$X$ ~ $N(\\mu ,\\sigma ^{2})$概率密度函数\n\\[ f(x ; \\mu, \\sigma)=\\frac{1}{\\sigma \\sqrt{2 \\pi}} \\exp \\left(-\\frac{(x-\\mu)^{2}}{2 \\sigma^{2}}\\right) \\]\n如果$\\mu = 0$并且$\\sigma = 1$，则这个分布简化为\n\\[ f(x)=\\frac{1}{\\sqrt{2 \\pi}} \\exp \\left(-\\frac{x^{2}}{2}\\right) \\]\n令\n\\[ Z(x) = {\\sqrt{2 \\pi}} \\exp \\left(\\frac{x^{2}}{2}\\right) \\frac{1}{\\pi\\left(1+x^{2}\\right)} \\]\n则\n\\[ c(x ; 0,1)= Z(x) \\ast f(x) \\]\n创建标准柯西分布\n1 2 3 4 5 6  x_0 = 0 gamma = 1 cauchy_pdf = stats.cauchy.pdf(x, loc=0, scale=1) cauchy_cdf = stats.cauchy.cdf(x, loc=0, scale=1) cn_zx = 1 / y_pdf * cauchy_pdf   绘制标准柯西分布pdf和cdf\n1 2 3 4 5 6 7 8 9 10 11  fig = go.Figure() fig.add_trace(go.Scatter(x=x, y=cauchy_pdf, mode='lines', name='pdf of Cauchy distribution')) fig.add_trace(go.Scatter(x=x, y=cauchy_cdf, mode='lines', name='cdf of Cauchy distribution')) fig.update_layout(height=500, width=800, title_text=r\"$\\text{pdf and cdf of Standard Cauchy distribution}$\", title_x=0.4, xaxis_title = r'$\\text{The values of }x$', yaxis_title = r'$\\text{The values of pdf and cdf}$') fig.show()   \n计算$Z (\\omega) = 1$的临界点\n1 2 3  critical = max(np.where(cn_zx\u003c1.00001)).max() # 注意Z(ω)为对称函数，求得一侧临界点即可反推另一侧临界点 left = -sigma_N + (len(x)-critical)*dx # Z \u003e 1的左边界 right = -sigma_N + critical*dx # Z \u003e 1的右边界   绘制标准柯西分布与标准正态分布的变换图像pdf\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  # Initialize figure with subplots fig = make_subplots(rows=2, cols=1, shared_xaxes=True, vertical_spacing = 0.05) # Add traces fig.add_trace(go.Scatter(x=x, y=cn_zx, mode='lines', name='The values of cn_zx'), row=1, col=1) fig.add_hline(y=1, name = 'Z_omega = 1', line_color = \"red\", line_dash=\"dot\", line_width=2) fig.add_vrect(x0=left, x1=right, row=\"all\", col=1, annotation_text=r\"$\\text{The interval where }Z\\text{ downward probability}$\", annotation_position=\"top left\", fillcolor=\"green\", opacity=0.25, line_width=0) fig.add_trace(go.Scatter(x=x, y=y_pdf, mode='lines', name='pdf of Normal'), row=2, col=1) fig.add_trace(go.Scatter(x=x, y=cauchy_pdf, mode='lines', name='pdf of Cauchy'), row=2, col=1) fig.add_trace(go.Scatter(x=x, y=cauchy_pdf-y_pdf, mode='lines', name='pdf of Cauchy - Normal'), row=2, col=1) # Update xaxis properties fig.update_xaxes(title_text='The values of x', row=2, col=1) # Update yaxis properties fig.update_yaxes(title_text='The values of cn_zx', row=1, col=1) fig.update_yaxes(title_text='The values of pdf', row=2, col=1) # Update layout info fig.update_layout(height=600, width=800, title_text=r\"$\\text{Normal Distribution and Change of Measure } Z(\\omega) $\", title_x=0.45) fig.show()   \n将图像绘制在一张图上\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  # Create figure with secondary y-axis fig = make_subplots(specs=[[{\"secondary_y\": True}]]) fig.add_trace(go.Scatter(x=x, y=y_pdf, mode='lines', name='pdf of Normal')) fig.add_trace(go.Scatter(x=x, y=cauchy_pdf, mode='lines', name='pdf of Cauchy')) fig.add_trace(go.Scatter(x=x, y=cauchy_pdf-y_pdf, mode='lines', name='pdf of Cauchy - Normal')) fig.add_trace(go.Scatter(x=x, y=cn_zx, mode='lines', name='The Values of cn_zx'), secondary_y=True) fig.add_hline(y=1, name = 'Z_omega = 1', line_color = \"red\", line_dash=\"dot\", line_width=2, secondary_y=True) # annotation_text=\"Baseline Z = 1\"无法在secondary y-axis显示 # annotation_position=\"bottom right\"无法在secondary y-axis显示 fig.add_vrect(x0=left, x1=right, row=\"all\", col=1, annotation_text=r\"$\\text{The interval where }Z\\text{ downward probability}$\", annotation_position=\"top left\", fillcolor=\"green\", opacity=0.25, line_width=0) fig.update_xaxes(title_text = r'$\\text{The values of }x$') fig.update_yaxes(title_text = r'$\\text{The values of pdf and cdf}$', secondary_y=False) fig.update_yaxes(title_text = r'$\\text{The values of }Z$', secondary_y=True) fig.update_layout(height=500, width=800, title_text=r\"$\\text{Normal Distribution and Change of Measure } Z(\\omega) $\", title_x=0.4) fig.show()   \n绘制标准柯西分布与标准正态分布的变换图像cdf\n1 2 3 4 5 6 7 8 9 10 11  fig = go.Figure() fig.add_trace(go.Scatter(x=x, y=y_cdf, mode='lines', name='cdf of Normal')) fig.add_trace(go.Scatter(x=x, y=cauchy_cdf, mode='lines', name='cdf of Cauchy')) fig.add_trace(go.Scatter(x=x, y=y_cdf - cauchy_cdf, mode='lines', name='cdf of Normal - Cauchy')) fig.update_layout(height=500, width=800, title_text=\"cdf of Cauchy and Normal distribution\", title_x=0.5, xaxis_title = 'The values of x', yaxis_title = 'The values of cdf') fig.show()   \n3 总结 对具有概率密度函数和概率分布函数的连续变量来说，测度变换类似于换元积分法。\n引用Reference：\n 金融随机分析\n Stochastic Calculus for Finance Vol.2\n 维基百科\n  致谢Credit to:\n 妈咪叔在线LaTeX\n Plotly\n  ","description":"","tags":["金融数学"],"title":"金融随机分析第2册1.6测度变换笔记","uri":"/posts/notes-and-visualization-of-scff/"}]
